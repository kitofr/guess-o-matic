Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Effects = Elm.Effects.make(_elm),
   $Html = Elm.Html.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm),
   $String = Elm.String.make(_elm),
   $Task = Elm.Task.make(_elm),
   $Types = Elm.Types.make(_elm),
   $View = Elm.View.make(_elm);
   var _op = {};
   var backspace = function (_p0) {
      var _p1 = _p0;
      var _p2 = _p1.guess;
      var g = _p2._0;
      var q = _p2._1;
      var g$ = A2($String.dropRight,1,g);
      return {guess: {ctor: "_Tuple2",_0: g$,_1: q},state: A2($Types.addGuess,{ctor: "_Tuple2",_0: g$,_1: q},_p1.state)};
   };
   var addChar = F2(function (ch,_p3) {
      var _p4 = _p3;
      var _p5 = _p4.guess;
      var g = _p5._0;
      var q = _p5._1;
      var g$ = {ctor: "_Tuple2",_0: A2($String.append,g,ch),_1: q};
      return {guess: g$,state: A2($Types.addGuess,g$,_p4.state)};
   });
   var init = function () {
      var state$ = $Types.initialState;
      var guess$ = A2($Types.createGuess,"",state$);
      return {ctor: "_Tuple2",_0: {guess: guess$,state: state$},_1: $Effects.none};
   }();
   var nextWord = F2(function (model,state$) {
      var _p6 = state$;
      if (_p6.ctor === "FinishedGame") {
            return {guess: model.guess,state: state$};
         } else {
            return {guess: _p6._0,state: state$};
         }
   });
   var update = F2(function (action,model) {
      var _p7 = action;
      switch (_p7.ctor)
      {case "AddChar": return {ctor: "_Tuple2",_0: A2(addChar,_p7._0,model),_1: $Effects.none};
         case "Reset": var _p8 = model.guess;
           var q = _p8._1;
           return {ctor: "_Tuple2",_0: _U.update(model,{guess: {ctor: "_Tuple2",_0: "",_1: q}}),_1: $Effects.none};
         case "Backspace": return {ctor: "_Tuple2",_0: backspace(model),_1: $Effects.none};
         default: return {ctor: "_Tuple2",_0: A2(nextWord,model,_p7._0),_1: $Effects.none};}
   });
   var app = $StartApp.start({init: init,view: $View.view,update: update,inputs: _U.list([])});
   var main = app.html;
   var tasks = Elm.Native.Task.make(_elm).performSignal("tasks",app.tasks);
   var guessChanges = Elm.Native.Port.make(_elm).outboundSignal("guessChanges",
   function (v) {
      return v;
   },
   A2($Signal.map,function (m) {    return $Basics.fst(m.guess);},app.model));
   var correct = Elm.Native.Port.make(_elm).outboundSignal("correct",
   function (v) {
      return v;
   },
   A2($Signal.map,function (m) {    return $Types.correct(m.guess);},app.model));
   return _elm.Main.values = {_op: _op,app: app,main: main,nextWord: nextWord,init: init,addChar: addChar,backspace: backspace,update: update};
};