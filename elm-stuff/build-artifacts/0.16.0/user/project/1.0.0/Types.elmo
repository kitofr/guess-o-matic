Elm.Types = Elm.Types || {};
Elm.Types.make = function (_elm) {
   "use strict";
   _elm.Types = _elm.Types || {};
   if (_elm.Types.values) return _elm.Types.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Data = Elm.Data.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Set = Elm.Set.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm);
   var _op = {};
   var currentScore = function (state) {    var _p0 = state;if (_p0.ctor === "FinishedGame") {    return _p0._1;} else {    return _p0._3;}};
   var guess = function (state) {
      var _p1 = state;
      if (_p1.ctor === "FinishedGame") {
            return {ctor: "_Tuple2",_0: "",_1: {word: "",image: ""}};
         } else {
            return _p1._0;
         }
   };
   var createGuess = F2(function (g,state) {    var _p2 = guess(state);var q = _p2._1;return {ctor: "_Tuple2",_0: g,_1: q};});
   var word = function (question) {    return question.word;};
   var points = function (_p3) {    var _p4 = _p3;return $String.length(_p4._1.word);};
   var correct = function (_p5) {    var _p6 = _p5;return _U.eq(_p6._0,word(_p6._1));};
   var updateCollected = F2(function (set,_p7) {
      var _p8 = _p7;
      return A3($List.foldr,F2(function (c,a) {    return A2($Set.insert,c,a);}),set,$String.toList(_p8._0));
   });
   var collected = function (state) {    var _p9 = state;if (_p9.ctor === "FinishedGame") {    return _p9._0;} else {    return _p9._2;}};
   var wordList = function (state) {    var _p10 = state;if (_p10.ctor === "FinishedGame") {    return _U.list([]);} else {    return _p10._1;}};
   var Model = F2(function (a,b) {    return {guess: a,state: b};});
   var NewWord = function (a) {    return {ctor: "NewWord",_0: a};};
   var Backspace = {ctor: "Backspace"};
   var Reset = {ctor: "Reset"};
   var PlayChar = function (a) {    return {ctor: "PlayChar",_0: a};};
   var AddChar = function (a) {    return {ctor: "AddChar",_0: a};};
   var Guessing = F4(function (a,b,c,d) {    return {ctor: "Guessing",_0: a,_1: b,_2: c,_3: d};});
   var FinishedGame = F2(function (a,b) {    return {ctor: "FinishedGame",_0: a,_1: b};});
   var initialState = function () {
      var _p11 = $Data.alternatives;
      if (_p11.ctor === "::") {
            return A4(Guessing,{ctor: "_Tuple2",_0: "",_1: _p11._0},_p11._1,$Set.empty,0);
         } else {
            return A2(FinishedGame,$Set.empty,0);
         }
   }();
   var addGuess = F2(function (guess,state) {
      var score = currentScore(state);
      var score$ = points(guess) + score;
      var collected$ = A2(updateCollected,collected(state),guess);
      var lst = wordList(state);
      if (correct(guess)) {
            var _p12 = lst;
            if (_p12.ctor === "[]") {
                  return A2(FinishedGame,collected$,score$);
               } else {
                  return A4(Guessing,{ctor: "_Tuple2",_0: "",_1: _p12._0},_p12._1,collected$,score$);
               }
         } else return A4(Guessing,guess,lst,collected(state),score);
   });
   var Question = F2(function (a,b) {    return {word: a,image: b};});
   return _elm.Types.values = {_op: _op
                              ,Question: Question
                              ,FinishedGame: FinishedGame
                              ,Guessing: Guessing
                              ,AddChar: AddChar
                              ,PlayChar: PlayChar
                              ,Reset: Reset
                              ,Backspace: Backspace
                              ,NewWord: NewWord
                              ,Model: Model
                              ,wordList: wordList
                              ,collected: collected
                              ,initialState: initialState
                              ,updateCollected: updateCollected
                              ,correct: correct
                              ,points: points
                              ,word: word
                              ,guess: guess
                              ,createGuess: createGuess
                              ,currentScore: currentScore
                              ,addGuess: addGuess};
};